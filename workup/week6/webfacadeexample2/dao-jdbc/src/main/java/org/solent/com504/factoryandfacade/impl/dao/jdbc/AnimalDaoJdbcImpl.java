/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.solent.com504.factoryandfacade.impl.dao.jdbc;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import org.solent.com504.factoryandfacade.model.dao.AnimalDao;
import org.solent.com504.factoryandfacade.model.dto.Animal;
import org.solent.com504.factoryandfacade.model.dto.AnimalType;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

/**
 *
 * @author cgallen
 */
public class AnimalDaoJdbcImpl implements AnimalDao {
    
    final static Logger LOG = LogManager.getLogger(AnimalDaoJdbcImpl.class);
    
    private ConnectionFactory connectionFactory;
    
    public AnimalDaoJdbcImpl(ConnectionFactory cf) {
        this.connectionFactory = cf;

        // create database
        PreparedStatement ptmt = null;
        ResultSet resultSet = null;
        Connection connection = null;
        
        Animal animal = null;
        try {
            connection = connectionFactory.getConnection();
            
            String queryString = "CREATE TABLE ANIMAL (ID BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL, ADDRESS VARCHAR(255), NAME VARCHAR(255), SOUND VARCHAR(255), TYPE VARCHAR(255), PRIMARY KEY (ID))";
            
            ptmt = connection.prepareStatement(queryString);
            ptmt.execute();
            
        } catch (Exception e) {
            // see https://stackoverflow.com/questions/5866154/how-to-create-table-if-it-doesnt-exist-using-derby-db
            LOG.error("table creation exception (may happen if duplicate table exists)", e);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (ptmt != null) {
                    ptmt.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                LOG.error("finally exception", e);
            } catch (Exception e) {
                LOG.error("rfinally exception", e);
            }
        }
        
    }
    
    @Override
    public Animal retrieve(long id) {
        PreparedStatement ptmt = null;
        ResultSet resultSet = null;
        Connection connection = null;
        Animal animal = null;
        try {
            connection = connectionFactory.getConnection();
            
            String queryString = "INSERT INTO ANIMAL (RollNo, Name, Course, Address) VALUES(?,?,?,?)";
            
            resultSet = ptmt.executeQuery();
			while (resultSet.next()) {
				System.out.println("Roll No " + resultSet.getInt("RollNo")
						+ ", Name " + resultSet.getString("Name") + ", Course "
						+ resultSet.getString("Course") + ", Address "
						+ resultSet.getString("Address"));
			}
            
            animal = new Animal();
            animal.setAddress(queryString);
            AnimalType animalType = new AnimalType();
            animal.setAnimalType(animalType);
            animal.setId(id);
            String name = null;
            animal.setName(name);
            ptmt = connection.prepareStatement(queryString);
            ptmt.setLong(1, id);
            
            ptmt.executeUpdate();
            
        } catch (Exception e) {
            LOG.error("retrieve exception", e);
            throw new RuntimeException("retrieve exception", e);
        } finally {
            try {
                if (resultSet != null) {
                    resultSet.close();
                }
                if (ptmt != null) {
                    ptmt.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                LOG.error("finally exception", e);
            } catch (Exception e) {
                LOG.error("rfinally exception", e);
            }
            return animal;
        }
    }

//    @Override
//    public Animal updateOrSave(Animal animal) {
//        connectionFactory.getTransaction().begin();
//        connectionFactory.persist(animal);  // NOTE merge(animal) differnt semantics
//        // connectionFactory.flush() could be used
//        connectionFactory.getTransaction().commit();
//        return animal;
//    }
//
//    @Override
//    public boolean delete(long id) {
//        connectionFactory.getTransaction().begin();
//        Query q = connectionFactory.createQuery("DELETE FROM Animal a WHERE a.id=:id");
//        q.setParameter("id", id);
//        q.executeUpdate();
//        connectionFactory.getTransaction().commit();
//
//        return true;
//    }
//
//    @Override
//    public List<Animal> retrieve(Animal animalTemplate) {
//
//        Map<String, String> paramMap = new HashMap<String, String>();
//
//        String queryString = "select a from Animal a WHERE TRUE=TRUE  "; // WHERE TRUE=TRUE masn WHERE always has a predicate ";
//        if (animalTemplate.getName() != null) {
//            queryString = queryString + "AND a.name LIKE :name "; //':name' ";
//            paramMap.put("name", animalTemplate.getName());
//        }
//        if (animalTemplate.getAddress() != null) {
//            queryString = queryString + "AND a.address LIKE :address ";
//            paramMap.put("address", animalTemplate.getAddress());
//        }
//        if (animalTemplate.getAnimalType() != null && animalTemplate.getAnimalType().getType() != null) {
//            queryString = queryString + "AND a.animalType.type LIKE :type ";
//            paramMap.put("type", animalTemplate.getAnimalType().getType());
//        }
//
//        // prevents running this section if not printing debug log
//        if (LOG.isDebugEnabled()) {
//            LOG.debug("queryString string built: " + queryString + "using parameters: ");
//            for (String key : paramMap.keySet()) {
//                LOG.debug("key: " + key + " value:" + paramMap.get(key));
//            }
//        }
//
//        TypedQuery<Animal> query = connectionFactory.createQuery(queryString, Animal.class);
//        for (String key : paramMap.keySet()) {
//            query.setParameter(key, paramMap.get(key));
//        }
//
//        List<Animal> animalList = query.getResultList();
//        return animalList;
//    }
//
//    @Override
//    public List<Animal> retrieveAll() {
//        TypedQuery<Animal> q = connectionFactory.createQuery("SELECT a FROM Animal a", Animal.class);
//        List<Animal> animalList = q.getResultList();
//        return animalList;
//    }
//
//    @Override
//    public void deleteAll() {
//        connectionFactory.getTransaction().begin();
//        connectionFactory.createQuery("DELETE FROM Animal ").executeUpdate();
//        connectionFactory.getTransaction().commit();
//    }
    // no need to synchronize - same as simple dao
    @Override
    public Animal create(AnimalType animalType
    ) {
        Animal animal = new Animal();
        animal.setAnimalType(animalType);
        return animal;
    }
    
    @Override
    public Animal updateOrSave(Animal animal) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public boolean delete(long id) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public List<Animal> retrieve(Animal animalTemplate) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public List<Animal> retrieveAll() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    @Override
    public void deleteAll() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
